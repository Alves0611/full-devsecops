name: Kubernetes Deployment

on:
  workflow_call:
    inputs:
      image-tag:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      EKS_CLUSTER_NAME:
        required: true
      DOCKER_USERNAME:
        required: true

jobs:
  deployment:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install kubectl CLI
        uses: azure/setup-kubectl@v4
        with:
          version: v1.27.4

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Replace Token in Manifest files
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: "_{_"
          tokenSuffix: "_}_"
          files: '["kubernetes/*.yml"]'
        env:
          NAMESPACE: ${{ vars.NAMESPACE }}
          REPLICAS: ${{ vars.REPLICAS }}
          K8S_IMAGE: ${{ secrets.DOCKER_USERNAME }}/${{ inputs.image-tag }}

      - name: Vulnerability Scan - Kubernetes
        run: |
          docker run --rm -v $(pwd):/project openpolicyagent/conftest:v0.45.0 test --policy opa-policies/opa-k8s-security.rego kubernetes/deployment.yml kubernetes/service.yml

      - name: Set environment variables
        run: |
          echo "DEPLOYMENT_NAME=devsecops" >> $GITHUB_ENV
          echo "CONTAINER_NAME=devsecops-container" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/${{ inputs.image-tag }}" >> $GITHUB_ENV

      - name: K8S Deployment (Parallel)
        run: |
          # Run deployment and rollout status in parallel
          echo "Starting Deployment branch..."
          bash scripts/k8s-deployment.sh &
          DEPLOY_PID=$!

          echo "Starting Rollout_Status branch..."
          sleep 5
          bash scripts/k8s-deployment-rollout-status.sh &
          ROLLOUT_PID=$!

          # Wait for both processes
          wait $DEPLOY_PID
          DEPLOY_EXIT_CODE=$?
          wait $ROLLOUT_PID
          ROLLOUT_EXIT_CODE=$?

          # Exit with error if any branch failed
          if [ $DEPLOY_EXIT_CODE -ne 0 ] || [ $ROLLOUT_EXIT_CODE -ne 0 ]; then
            echo "One or both branches failed"
            exit 1
          fi

      - name: Verify deployment
        run: |
          kubectl get all -l app=devsecops
          kubectl rollout history deploy devsecops
